spring:
  application:
    name: robot
  kafka:
    group-id: robot
    enabled: true
    bootstrap-servers: ${KAFKA_BOOTSTRAP_ADDRESS}
    bootstrap-port: ${KAFKA_BOOTSTRAP_PORT}
    topic:
      consumer:
        round: roundStatus
    consumer:
      auto-offset-reset: earliest
  datasource:
    url: jdbc:h2:mem:mydb
    username: ${DB_USER:root}
    password: ${DB_PASSWORD:root}
    driverClassName: org.h2.Driver
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create-drop
  h2:
    console.path: /h2-console
    console.settings.trace: false
    spring.h2.console.settings.web-allow-others: false

microservice:
  map:
    address: ${MAP_SERVICE}
topics:
  robot-movement: movement
  robot-neighbours: neighbours
  robot-blocked: planet-blocked
  robot-mining: mining
  robot-fighting: fighting
  robot-regeneration: regeneration
  robot-item-fighting: item-fighting
  robot-item-repair: item-repair
  robot-item-movement: item-movement
  robot-resource-distribution: resource-distribution
  robot-destroyed: robot-destroyed
  spawn-notification: spawn-notification
logging:
  file:
    path: ./logs

management:
  endpoints:
    web:
      exposure:
        include: logs
---
spring:
  config:
    activate:
      on-profile: test
  application:
    name: robot
  kafka:
    group-id: robot
    enabled: true
    bootstrap-servers: localhost:29092
    topic:
      consumer:
        round: gameServiceRound
    consumer:
      auto-offset-reset: earliest
  datasource:
    url: jdbc:h2:mem:mydb
    username: ${DB_USER:root}
    password: ${DB_PASSWORD:root}
    driverClassName: org.h2.Driver
  jpa:
    hibernate:
      ddl-auto: create
    database-platform: org.hibernate.dialect.H2Dialect
microservice:
  map:
    address: http://localhost:8081
