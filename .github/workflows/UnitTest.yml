name: CI Unit Test

# Controls when the workflow will run
on:
  pull_request:
    paths-ignore:
      - 'swagger/**'
      - '**/README.md'
      - '**/.gitignore'
    types: [opened, synchronize]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  unit-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    services:
      mariadb:
        image: mariadb:10.6.5
        env:
          MYSQL_PASSWORD: robot
          MYSQL_USER: robot
          MYSQL_DATABASE: robot
          MYSQL_ROOT_PASSWORD: root
        ports:
          - '3306:3306'
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Set up JDK 11 + cache
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'
          # Setup gradle cache
          cache: gradle

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1.0.4

      - name: Unit Test
        # since it's h2, it is kind of unnecessary
        env:
          DB_PASSWORD: robot
          DB_USER: robot
          DB_NAME: robot
          DB_HOST: localhost:3306
        run: ./gradlew test --build-cache --parallel

      - name: Cleanup Gradle Cache
        # Remove some files from the Gradle cache, so they aren't cached by GitHub Actions.
        # Restoring these files from a GitHub Actions cache might cause problems for future builds.
        run: |
          rm -f $GRADLE_USER_HOME/caches/modules-2/modules-2.lock
          rm -f $GRADLE_USER_HOME/caches/modules-2/gc.properties
